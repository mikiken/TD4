@require: stdjareport
@require: itemize
@require: figbox/figbox
@require: easytable/easytable

open FigBox
open EasyTableAlias
in

% 以下の内容を記載
% 1. 表紙(名前と学籍番号含む)
% 2. 仕様書(何を作ったか.何故作ったか.どのように作ったか.)
% 3. 回路の説明(全体図は必ず入れる.部分的な図は説明に必要なものは入れる.)
% 4. 考察,まとめ
% 5. 感想,学び
% 可能なら独立した表紙をつける
document(|
    title = { 電気電子工学実験Ⅲ テーマS(a)　簡単な4bit CPUの製作 };
    author = { 三木 健太郎 };
    show-title = true;
    show-toc = true;
|)'<
    +chapter { 概要 } <
        +section { 製作物の概要 } <
            +p {
                本テーマ後半の自由設計では、簡単な4bit CPUの製作を行った。
                このCPUはデータ転送命令や加算命令、データの入出力命令などを実行することができる。
                これらの命令を組み合わせることで、LEDを予め決めた通りのパターンで光らせるプログラムや、
                タイマー機能を持つプログラムなどを実行することができる。
            }
        >
        +section { 書籍「CPUの創りかた」について } <
            +p {
                74シリーズの汎用論理ICを用い、データ転送・加算・データ入出力といった命令を実行できる4bit CPUを製作する方法を解説した書籍である。
                LEDの点灯回路といった基本的な事項から、CPUの基本構成、実装方法といった応用的な事項まで、幅広い内容が平易に解説されている。
                2003年に毎日コミュニケーションズ(現 マイナビ出版)から出版され、現在30刷以上重版されている。
            }
        >
        +section { 製作の動機 } <
            +p {
                計算機工学1や2で、フリップフロップなどのディジタル回路の基本的な構成要素やCPUの構造について学習した。
                しかし、授業で知識を学んだだけでは、CPUの内部構造について、深い理解を得ることはできなかった。
                そこで、本実験において簡単なCPUを実装することにより、CPUの内部構造を実感をもって理解したいと考えた。
                簡単なCPUを実装するという内容の書籍は複数存在するが、回路自体の規模が大きく、授業時間内で実装を完遂するのが難しいものが多かった。
                「CPUの創りかた」で解説されている「TD4」は、機能を絞っている分、回路の規模が小さく、授業時間内で実装を完遂することが可能であると考えた。
            }
        >
        +section { 製作方法 } <
            +p {
                基本的には、書籍「CPUの創りかた」に従って製作を行った。
                具体的には、レジスタ、ALU、プログラムカウンタ、命令デコーダ、ROMの順に実装を行った。
                書籍では74シリーズのICを用いながら実際に回路を組み立てるため、
                解説内容がFPGAでの実装にそぐわない部分が一部あった。
                そのような部分については、FPGAでの実装に適した内容に書き換えた。(詳細は後述する。)
            }
        >
    >
    +chapter { 回路の説明 } <
        +section { TD4の仕様 } <
            +p {
                TD4の命令長は8bitとなっており、オペコードが4bit、オペランドが4bitとなっている。
                \footnote { 表現できるアドレスも4bitの範囲となるため、実行できるプログラムは最大で16ステップのものまでとなる。 }
                演算用のレジスタはAレジスタとBレジスタの2つあり、いずれも4bitの値を記憶することができる。
            }
            +p { TD4において実行できる命令の一覧を以下に示す。 }
            +easytable [c;c;c;] {
                | 命令 | オペコード | 概要
                | `ADD A, Im` | 0000 | Aレジスタに即値Imを加算する
                | `ADD B, Im` | 0101 | Bレジスタに即値Imを加算する
                | `MOV A, Im` | 0011 | Aレジスタに即値Imを代入する
                | `MOV B, Im` | 0111 | Bレジスタに即値Imを代入する
                | `MOV A, B` | 0001 | Bレジスタの値をAレジスタに代入する
                | `MOV B, A` | 0100 | Aレジスタの値をBレジスタに代入する
                | `JMP Im` | 1111 | 即値Imで指定されたアドレスにジャンプする
                | `JNC Im` | 1110 | キャリーフラグが0のとき、即値Imで指定されたアドレスにジャンプする
                | `IN A` | 0010 | 入力端子からデータを入力し、Aレジスタに代入する
                | `IN B` | 0110 | 入力端子からデータを入力し、Bレジスタに代入する
                | `OUT B` \footnote { なお、`OUT A`命令は存在しない。 } | 1001 | Bレジスタの値を出力端子に出力する
                | `OUT Im` | 1011 | 即値Imを出力端子に出力する
                |
            }
            +p {
                `ADD A, Im`, `ADD B, Im`は、レジスタに対して、即値`Im`を加算する命令である。
                また、 `MOV A, Im`, `MOV B, Im`は、レジスタに対して、即値`Im`を代入する命令である。
                `MOV A, B`, `MOV B, A`は、レジスタ間のデータ転送命令である。
                `JMP Im`は、即値`Im`で指定されたアドレスの命令にジャンプする命令である。
                `JNC Im`は、キャリーフラグが`0`のときに、即値`Im`で指定されたアドレスにジャンプする命令であり、プログラムの条件分岐に用いることができる。
                `IN A`, `IN B`は、入力端子からのデータ入力命令である。
                `OUT B`はレジスタBの値を出力端子に出力する命令である。
                `OUT Im`は、即値`Im`を出力端子に出力する命令である。
            }
        >
    >
    +chapter { 考察 } <>
    +chapter { 感想 } <>
>
